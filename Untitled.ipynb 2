{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": "print(clientId)"
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "ImportError",
     "evalue": "No module named pandas",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mImportError\u001b[0m                               Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-1-a9724332e4d5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mwarnings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mwarnings\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfilterwarnings\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'ignore'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mtime\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mImportError\u001b[0m: No module named pandas"
     ]
    }
   ],
   "source": "clientId = 300\nreqId = 3\nimport warnings\nwarnings.filterwarnings('ignore')\nimport pandas as pd\nimport numpy as np\nimport time\nfrom datetime import datetime\nfrom datetime import date, timedelta\nfrom myWrapper import IBWrapper, contract\nfrom ib.ext.EClientSocket import EClientSocket\nfrom ib.ext.ScannerSubscription import ScannerSubscription\nimport xlsxwriter\nfrom dateutil.relativedelta import *\nfrom pathlib import Path\nimport os.path\naccountName = \"U9038813\"\nhost = \"\"\nport = 7497 #TWS\n#port = 4001 #Gateway\nimport os\nimport xlrd\nn=0\nnr=0\nf=0\nask=[]\nbid=[]\nrwfs=\"lock.xls\"\nrwbook = xlrd.open_workbook(rwfs)\nrwsh = rwbook.sheet_by_index(0)\ntoday_date=\"18\"\nmon=\"01\"\nendday=\"18\"\n"
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": "if rwsh.cell_value(rowx=0, colx=0)!=\"lock\":\n    rwworkbook3   = xlsxwriter.Workbook(rwfs)\n    rwworksheet2 = rwworkbook3.add_worksheet()\n    rwworksheet2.write('A'+str(1), \"lock\")\n    rwworkbook3.close()\n                \nclientId = clientId + 1\n\nstartyear = \"2020\"\nstartmonth = mon\nstartday = today_date\nendyear = \"2020\"\nendmonth = mon\nendday = endday\nstartdate= date(int(startyear), int(startmonth), int(startday))\nBid_or_Ask=\"BID\"\nfilename=Bid_or_Ask+'201904_GCN8_monthly_30sec_'\nsub_filename=\".xls\"\n#clientId = 13\nn=0\nnr=0\nc=0\nf=0\nwrite=0\nwhile startdate <= date(int(endyear), int(endmonth), int(endday)) and n<30:\n    \n    clientId = clientId + 1\n    callback = IBWrapper()             # Instantiate IBWrapper. callback \n    tws = EClientSocket(callback)      # Instantiate EClientSocket and return data to callback\n    tws.eConnect(host, port, clientId) # Connect to TWS\n    create = contract()                # Instantiate contract class\n    contract_Details = create.create_contract(\"GC\", \"FUT\", \"NYMEX\", \"USD\", \"202002\", \"GCG0\")\n    callback.initiate_variables()\n    tws.reqAccountUpdates(1, accountName)\n    tws.reqIds(1)\n    data_endtime= str(startdate)[0:4]+str(startdate)[5:7]+str(startdate)[8:10]+\" 18:00:00\"\n    #[9057, 321, \"Error validating request:-'bI' : cause - When specifying a unit, historical data request \n    # duration format is integer{SPACE}unit (S|D|W|M|Y).\"]\n\n    #[9057, 321, \"Error validating request:-'bI' : cause - Historical data bar size setting is invalid. \n    #Legal ones are: 1 secs, 5 secs, 10 secs, 15 secs, 30 secs, 1 min, 2 mins, 3 mins, 5 mins, 10 mins, \n    #15 mins, 20 mins, 30 mins, 1 hour, 2 hours, 3 hours, 4 hours, 8 hours, 1 day, 1W, 1M\"]\n    tws.reqHistoricalData(reqId, \n                    contract_Details, \n                    data_endtime,\n                    \"1 M\", \n                    #\"30 secs\",\n                    #\"5 secs\",\n                    \"30 secs\",\n                    Bid_or_Ask, \n                    0, \n                    1)\n    time.sleep(180)\n    while len(callback.historical_Data)==0:\n        time.sleep(20)\n    #time.sleep(180)\n    i=0\n    print(i)\n    print(len(callback.historical_Data))\n    \n    while i<len(callback.historical_Data) and callback.historical_Data[i][2]!=-1:\n        \n        print(\"Aa\")\n        if len(callback.historical_Data)<1000 and len(callback.historical_Data)-i>0:\n            print(\"Ab\")\n            fs=\"TEST_\"+str(c)+filename+sub_filename\n            workbook3   = xlsxwriter.Workbook(fs)\n            worksheet2 = workbook3.add_worksheet()\n            k=0\n            s=len(callback.historical_Data)-i\n            while k<s and callback.historical_Data[i][2]!=-1:\n                worksheet2.write('A'+str(k+1), callback.historical_Data[i][1])\n                worksheet2.write('B'+str(k+1), callback.historical_Data[i][2])\n                worksheet2.write('C'+str(k+1), callback.historical_Data[i][3])\n                worksheet2.write('D'+str(k+1), callback.historical_Data[i][4])\n                worksheet2.write('E'+str(k+1), callback.historical_Data[i][5])\n                i=i+1\n                k=k+1\n            c=c+1\n            workbook3.close()\n        else:\n            print(\"A\")\n            fs=\"TEST_\"+str(c)+filename+sub_filename\n            workbook3   = xlsxwriter.Workbook(fs)\n            worksheet2 = workbook3.add_worksheet()\n            k=0\n            while k<1000 and callback.historical_Data[i][2]!=-1:\n                #print(\"B\")\n                worksheet2.write('A'+str(k+1), callback.historical_Data[i][1])\n                worksheet2.write('B'+str(k+1), callback.historical_Data[i][2])\n                worksheet2.write('C'+str(k+1), callback.historical_Data[i][3])\n                worksheet2.write('D'+str(k+1), callback.historical_Data[i][4])\n                worksheet2.write('E'+str(k+1), callback.historical_Data[i][5])\n                i=i+1\n                k=k+1\n                \n            c=c+1\n            workbook3.close()\n            if len(callback.historical_Data)-i<1000 and len(callback.historical_Data)-i>0:\n                print(\"D\")\n                fs=\"TEST_\"+str(c)+filename+sub_filename\n                workbook3   = xlsxwriter.Workbook(fs)\n                worksheet2 = workbook3.add_worksheet()\n                k=0\n                s=len(callback.historical_Data)-i\n                while k<s and callback.historical_Data[i][2]!=-1:\n                    worksheet2.write('A'+str(k+1), callback.historical_Data[i][1])\n                    worksheet2.write('B'+str(k+1), callback.historical_Data[i][2])\n                    worksheet2.write('C'+str(k+1), callback.historical_Data[i][3])\n                    worksheet2.write('D'+str(k+1), callback.historical_Data[i][4])\n                    worksheet2.write('E'+str(k+1), callback.historical_Data[i][5])\n                    i=i+1\n                    k=k+1\n                c=c+1\n                workbook3.close()\n    tws.eDisconnect()\n    startdate += relativedelta(months=12)\n    n=n+1\n######################################################################################################################\nclientId = clientId + 1\n#contract_Details = create.create_contract(\"GC\", \"FUT\", \"NYMEX\", \"USD\", \"201812\", \"GCN8\")\nstartyear = \"2020\"\nstartmonth = mon\nstartday = today_date\nendyear = \"2020\"\nendmonth = mon\nendday = endday\nstartdate= date(int(startyear), int(startmonth), int(startday))\nBid_or_Ask=\"ASK\"\nfilename=Bid_or_Ask+'201904_GCN8_monthly_30sec_'\nsub_filename=\".xls\"\n#clientId = 13\nn=0\nnr=0\nc=0\nf=0\nwrite=0\nwhile startdate <= date(int(endyear), int(endmonth), int(endday)) and n<30:\n    \n    clientId = clientId + 1\n    callback = IBWrapper()             # Instantiate IBWrapper. callback \n    tws = EClientSocket(callback)      # Instantiate EClientSocket and return data to callback\n    tws.eConnect(host, port, clientId) # Connect to TWS\n    create = contract()                # Instantiate contract class\n    contract_Details = create.create_contract(\"GC\", \"FUT\", \"NYMEX\", \"USD\", \"202002\", \"GCG0\")\n    callback.initiate_variables()\n    tws.reqAccountUpdates(1, accountName)\n    tws.reqIds(1)\n    data_endtime= str(startdate)[0:4]+str(startdate)[5:7]+str(startdate)[8:10]+\" 18:00:00\"\n    \n    #[9057, 321, \"Error validating request:-'bI' : cause - When specifying a unit, historical data request \n    # duration format is integer{SPACE}unit (S|D|W|M|Y).\"]\n\n    #[9057, 321, \"Error validating request:-'bI' : cause - Historical data bar size setting is invalid. \n    #Legal ones are: 1 secs, 5 secs, 10 secs, 15 secs, 30 secs, 1 min, 2 mins, 3 mins, 5 mins, 10 mins, \n    #15 mins, 20 mins, 30 mins, 1 hour, 2 hours, 3 hours, 4 hours, 8 hours, 1 day, 1W, 1M\"]\n    tws.reqHistoricalData(reqId, \n                    contract_Details, \n                    data_endtime,\n                    \"1 M\", \n                    #\"30 secs\",\n                    #\"5 secs\",\n                    \"30 secs\",\n                    Bid_or_Ask, \n                    0, \n                    1)\n    time.sleep(180)\n    while len(callback.historical_Data)==0:\n        time.sleep(10)\n    #time.sleep(180)\n    i=0\n    print(i)\n    print(len(callback.historical_Data))\n    \n    while i<len(callback.historical_Data) and callback.historical_Data[i][2]!=-1:\n        \n        print(\"Aa\")\n        if len(callback.historical_Data)<1000 and len(callback.historical_Data)-i>0:\n            print(\"Ab\")\n            fs=\"TEST_\"+str(c)+filename+sub_filename\n            workbook3   = xlsxwriter.Workbook(fs)\n            worksheet2 = workbook3.add_worksheet()\n            k=0\n            s=len(callback.historical_Data)-i\n            while k<s and callback.historical_Data[i][2]!=-1:\n                worksheet2.write('A'+str(k+1), callback.historical_Data[i][1])\n                worksheet2.write('B'+str(k+1), callback.historical_Data[i][2])\n                worksheet2.write('C'+str(k+1), callback.historical_Data[i][3])\n                worksheet2.write('D'+str(k+1), callback.historical_Data[i][4])\n                worksheet2.write('E'+str(k+1), callback.historical_Data[i][5])\n                i=i+1\n                k=k+1\n            c=c+1\n            workbook3.close()\n        else:\n            print(\"A\")\n            fs=\"TEST_\"+str(c)+filename+sub_filename\n            workbook3   = xlsxwriter.Workbook(fs)\n            worksheet2 = workbook3.add_worksheet()\n            k=0\n            while k<1000 and callback.historical_Data[i][2]!=-1:\n                print(\"B\")\n                worksheet2.write('A'+str(k+1), callback.historical_Data[i][1])\n                worksheet2.write('B'+str(k+1), callback.historical_Data[i][2])\n                worksheet2.write('C'+str(k+1), callback.historical_Data[i][3])\n                worksheet2.write('D'+str(k+1), callback.historical_Data[i][4])\n                worksheet2.write('E'+str(k+1), callback.historical_Data[i][5])\n                i=i+1\n                k=k+1\n            c=c+1\n            workbook3.close()\n            if len(callback.historical_Data)-i<1000 and len(callback.historical_Data)-i>0:\n                print(\"D\")\n                fs=\"TEST_\"+str(c)+filename+sub_filename\n                workbook3   = xlsxwriter.Workbook(fs)\n                worksheet2 = workbook3.add_worksheet()\n                k=0\n                s=len(callback.historical_Data)-i\n                while k<s and callback.historical_Data[i][2]!=-1:\n                    worksheet2.write('A'+str(k+1), callback.historical_Data[i][1])\n                    worksheet2.write('B'+str(k+1), callback.historical_Data[i][2])\n                    worksheet2.write('C'+str(k+1), callback.historical_Data[i][3])\n                    worksheet2.write('D'+str(k+1), callback.historical_Data[i][4])\n                    worksheet2.write('E'+str(k+1), callback.historical_Data[i][5])\n                    i=i+1\n                    k=k+1\n                c=c+1\n                workbook3.close()\n    tws.eDisconnect()\n    startdate += relativedelta(months=12)\n    n=n+1\n#####################################################################################################################\nstartyear = \"2020\"\nstartmonth = mon\nstartday = today_date\nendyear = \"2020\"\nendmonth = mon\nendday = endday\nstartdate= date(int(startyear), int(startmonth), int(startday))\nBid_or_Ask=\"BID\"\nbidfilename='BID201904_GCN8_monthly_30sec_'\naskfilename='ASK201904_GCN8_monthly_30sec_'\nsub_filename=\".xls\"\nc=0\nwhile c<500 and startdate <= date(int(endyear), int(endmonth), int(endday)):\n    bidfs=\"TEST_\"+str(c)+bidfilename+sub_filename\n    if os.path.isfile(bidfs):\n        book = xlrd.open_workbook(bidfs)\n        sh = book.sheet_by_index(0)\n        k = 0\n        while k<sh.nrows:\n            m=[]\n            m.append(sh.cell_value(rowx=k, colx=0))\n            m.append(sh.cell_value(rowx=k, colx=1))\n            m.append(sh.cell_value(rowx=k, colx=2))\n            m.append(sh.cell_value(rowx=k, colx=3))\n            m.append(sh.cell_value(rowx=k, colx=4))\n            bid.append(m)\n            k+=1\n        '''if sh.nrows!=1000:\n            print(fs)\n            print(\"Worksheet name(s): {0}\".format(book.sheet_names()))\n            print(\"{0} {1} {2}\".format(sh.name, sh.nrows, sh.ncols))\n            print(\"Cell D30 is {0}\".format(sh.cell_value(rowx=29, colx=3)))'''\n        c+=1\n    else:\n        startdate += relativedelta(months=12)\n        bidfs=\"TEST_\"+str(c)+bidfilename+sub_filename\n\nstartyear = \"2020\"\nstartmonth = mon\nstartday = today_date\nendyear = \"2020\"\nendmonth = mon\nendday = endday\nstartdate= date(int(startyear), int(startmonth), int(startday))\nBid_or_Ask=\"BID\"\nbidfilename='BID201904_GCN8_monthly_30sec_'\naskfilename='ASK201904_GCN8_monthly_30sec_'\nsub_filename=\".xls\"        \nc=0\nwhile c<500 and startdate <= date(int(endyear), int(endmonth), int(endday)):\n    askfs=\"TEST_\"+str(c)+askfilename+sub_filename\n    if os.path.isfile(askfs):\n        book = xlrd.open_workbook(askfs)\n        sh = book.sheet_by_index(0)\n        k = 0\n        while k<sh.nrows:\n            m=[]\n            m.append(sh.cell_value(rowx=k, colx=0))\n            m.append(sh.cell_value(rowx=k, colx=1))\n            m.append(sh.cell_value(rowx=k, colx=2))\n            m.append(sh.cell_value(rowx=k, colx=3))\n            m.append(sh.cell_value(rowx=k, colx=4))\n            ask.append(m)\n            k+=1\n        '''if sh.nrows!=1000:\n            print(fs)\n            print(\"Worksheet name(s): {0}\".format(book.sheet_names()))\n            print(\"{0} {1} {2}\".format(sh.name, sh.nrows, sh.ncols))\n            print(\"Cell D30 is {0}\".format(sh.cell_value(rowx=29, colx=3)))'''\n        c+=1\n    else:\n        startdate += relativedelta(months=12)\n        askfs=\"TEST_\"+str(c)+askfilename+sub_filename\n#####################################################################################################################\nprint(len(ask))\nprint(len(bid))\nprint(ask[-1])\n#####################################################################################################################\ntime.sleep(30)\nimport xlsxwriter\ni=0\nj=0\ns=0\nc=0\nK=0\nwhile (i<len(ask)):#i<len(ask) or j<len(bid)\n    print(c)\n    if K==0:\n        fs=\"Clean\"+str(c)+\"_30sec\"+\"201904GCN8.xls\"\n        workbook3   = xlsxwriter.Workbook(fs)\n        worksheet2 = workbook3.add_worksheet()\n    elif K==1000:\n        c=c+1\n        K=0\n        workbook3.close()\n        fs=\"Clean\"+str(c)+\"_30sec\"+\"201904GCN8.xls\"\n        workbook3   = xlsxwriter.Workbook(fs)\n        worksheet2 = workbook3.add_worksheet()\n    if i<len(ask):\n        datetime_object_ask = datetime.strptime(ask[i][0], \"%Y%m%d %H:%M:%S\")\n    \n    if j<len(bid):\n        datetime_object_bid = datetime.strptime(bid[j][0], \"%Y%m%d %H:%M:%S\")\n    \n    if datetime_object_ask==datetime_object_bid:\n        #print(bid[j][0])\n        #print(datetime_object_bid)\n        worksheet2.write('A'+str(K+1), bid[j][0])\n        worksheet2.write('B'+str(K+1), bid[j][1])\n        worksheet2.write('C'+str(K+1), bid[j][2])\n        worksheet2.write('D'+str(K+1), bid[j][3])\n        worksheet2.write('E'+str(K+1), bid[j][4])\n        worksheet2.write('F'+str(K+1), ask[i][0])\n        worksheet2.write('G'+str(K+1), ask[i][1])\n        worksheet2.write('H'+str(K+1), ask[i][2])\n        worksheet2.write('I'+str(K+1), ask[i][3])\n        worksheet2.write('J'+str(K+1), ask[i][4])\n        j=j+1\n        i=i+1\n        s=s+1\n    if datetime_object_ask<datetime_object_bid:\n        #print(\"bid\")\n        #print(datetime_object_ask)\n        #print(datetime_object_bid)\n        #print(datetime_object_ask)\n        if i<len((ask)):\n            #print(ask[i][0])\n            worksheet2.write('A'+str(K+1), ask[i][0])\n            worksheet2.write('B'+str(K+1), ask[i][1]-0.1)\n            worksheet2.write('C'+str(K+1), ask[i][2]-0.1)\n            worksheet2.write('D'+str(K+1), ask[i][3]-0.1)\n            worksheet2.write('E'+str(K+1), ask[i][4]-0.1)\n            worksheet2.write('F'+str(K+1), ask[i][0])\n            worksheet2.write('G'+str(K+1), ask[i][1])\n            worksheet2.write('H'+str(K+1), ask[i][2])\n            worksheet2.write('I'+str(K+1), ask[i][3])\n            worksheet2.write('J'+str(K+1), ask[i][4])\n            i=i+1\n            s=s+1\n        if i>=len(ask):\n            #print(bid[j][0])\n            worksheet2.write('A'+str(K+1), bid[j][0])\n            worksheet2.write('B'+str(K+1), bid[j][1])\n            worksheet2.write('C'+str(K+1), bid[j][2])\n            worksheet2.write('D'+str(K+1), bid[j][3])\n            worksheet2.write('E'+str(K+1), bid[j][4])\n            worksheet2.write('F'+str(K+1), bid[j][0])\n            worksheet2.write('G'+str(K+1), bid[j][1]+0.1)\n            worksheet2.write('H'+str(K+1), bid[j][2]+0.1)\n            worksheet2.write('I'+str(K+1), bid[j][3]+0.1)\n            worksheet2.write('J'+str(K+1), bid[j][4]+0.1)\n            j=j+1\n            s=s+1\n    if datetime_object_ask>datetime_object_bid:\n        #print(\"ask\")\n        #print(datetime_object_ask)\n        #print(datetime_object_bid)\n        #print(j)\n        #print(i)\n        #print(\"__________\")\n        if j<(len(bid)):\n            #print(bid[j][0])\n            worksheet2.write('A'+str(K+1), bid[j][0])\n            worksheet2.write('B'+str(K+1), bid[j][1])\n            worksheet2.write('C'+str(K+1), bid[j][2])\n            worksheet2.write('D'+str(K+1), bid[j][3])\n            worksheet2.write('E'+str(K+1), bid[j][4])\n            worksheet2.write('F'+str(K+1), bid[j][0])\n            worksheet2.write('G'+str(K+1), bid[j][1]+0.1)\n            worksheet2.write('H'+str(K+1), bid[j][2]+0.1)\n            worksheet2.write('I'+str(K+1), bid[j][3]+0.1)\n            worksheet2.write('J'+str(K+1), bid[j][4]+0.1)\n            j=j+1\n            s=s+1\n        if j>=len(bid):\n            #print(ask[i][0])\n            worksheet2.write('A'+str(K+1), ask[i][0])\n            worksheet2.write('B'+str(K+1), ask[i][1]-0.1)\n            worksheet2.write('C'+str(K+1), ask[i][2]-0.1)\n            worksheet2.write('D'+str(K+1), ask[i][3]-0.1)\n            worksheet2.write('E'+str(K+1), ask[i][4]-0.1)\n            worksheet2.write('F'+str(K+1), ask[i][0])\n            worksheet2.write('G'+str(K+1), ask[i][1])\n            worksheet2.write('H'+str(K+1), ask[i][2])\n            worksheet2.write('I'+str(K+1), ask[i][3])\n            worksheet2.write('J'+str(K+1), ask[i][4])\n            i=i+1\n            s=s+1            \n    K=K+1\n    #print(type(datetime_object))\nworkbook3.close()\nrwworkbook3   = xlsxwriter.Workbook(rwfs)\nrwworksheet2 = rwworkbook3.add_worksheet()\nrwworksheet2.write('A'+str(1), \"open\")\nrwworkbook3.close() "
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
